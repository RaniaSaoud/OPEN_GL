#version 330 core

in vec3 FragmentColor;
in vec3 vNormal;
in vec3 vPos;

out vec4 color;

uniform vec3 ambientLightColor;
uniform float ambientIntensity;
uniform vec3 lightPos; 
uniform vec3 diffuseLightColor;
uniform vec3 viewPos;

void main()
{

	vec3 normal = normalize(vNormal);
    vec3 lightDir = normalize(lightPos - vPos); 
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = diff * diffuseLightColor;

	float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - vPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 50);
    vec3 specular = specularStrength * spec * lightPos; 

   vec3 result = ambientIntensity * ambientLightColor + diffuse + specular; 
    color = vec4(result * FragmentColor, 1.0);

}
