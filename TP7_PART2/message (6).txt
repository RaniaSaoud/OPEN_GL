#include <iostream>
#include "glad/include/glad/glad.h"
#include <GLFW/glfw3.h>
#include "shader/shader.hpp"
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
using namespace glm;

struct Vertex
{
    vec3 position;
    vec3 color;
};


double mousePosX, mousePosY;

mat4 Model = mat4(1.0f);
double fov;


static void cursor_position(GLFWwindow* window, double x, double y)
{
     double diffX = mousePosX - x;
     double diffY = y - mousePosY;
    Model = rotate(Model,radians(float(diffX)),vec3(0.0f,0.0f,1.0f));
    Model = rotate(Model,radians(float(diffY)),vec3(1.0f,0.0f,0.0f));
}

void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}


void scroll (GLFWwindow* window, double xoffset, double yoffset)
{
    if (fov >= 1.0f && fov <= 45.0f)
        fov -= yoffset;
    if (fov <= 1.0f)
        fov = 1.0f;
    if (fov >= 45.0f)
        fov = 45.0f;
}

static void keyCallback(GLFWwindow* window, int key, int scancode, int action, int mods);

int main() {
    glfwInit();
    glfwWindowHint(GLFW_SAMPLES, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
    GLFWwindow* window = glfwCreateWindow(800, 600, "LearnOpenGL", NULL, NULL);
    if (window == NULL) {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    glViewport(0, 0, 800, 600);

    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

//    float vertices[] = {
//            1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
//            0.0f, -1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
//            -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f,
//    };

    Vertex vertices[] = {
            vec3(1.0f, 0.0f, 1.0f), vec3(0.0f, 0.0f, 1.0f),
            vec3(-1.0f, 0.0f, 1.0f), vec3(0.0f, 0.0f, 1.0f),
            vec3(-1.0f, 0.0f, -1.0f), vec3(0.0f, 0.0f, 1.0f),

            vec3(-1.0f, 0.0f, -1.0f), vec3(0.0f, 0.0f, 1.0f),
            vec3(1.0f, 0.0f, -1.0f), vec3(0.0f, 0.0f, 1.0f),
            vec3(1.0f, 0.0f, 1.0f), vec3(0.0f, 0.0f, 1.0f),


            vec3(0.0f, 1.0f, 0.0f), vec3(1.0f, 0.0f, 0.0f),
            vec3(1.0f, 0.0f, -1.0f), vec3(1.0f, 0.0f, 0.0f),
            vec3(1.0f, 0.0f, 1.0f), vec3(1.0f, 0.0f, 0.0f),


            vec3(0.0f, 1.0f, 0.0f), vec3(1.0f, 1.0f, 1.0f),
            vec3(-1.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 1.0f),
            vec3(-1.0f, 0.0f, -1.0f), vec3(1.0f, 1.0f, 1.0f),


            vec3(0.0f, 1.0f, 0.0f), vec3(1.0f, 0.0f, 1.0f),
            vec3(-1.0f, 0.0f, -1.0f), vec3(1.0f, 0.0f, 1.0f),
            vec3(1.0f, 0.0f, -1.0f), vec3(1.0f, 0.0f, 1.0f),

            vec3(0.0f, 1.0f, 0.0f), vec3(1.0f, 1.0f, 0.0f),
            vec3(-1.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f),
            vec3(1.0f, 0.0f, 1.0f), vec3(1.0f, 1.0f, 0.0f),




    };

    GLuint VAO;
    GLuint VBO;

    glGenVertexArrays(1, &VAO);
    glBindVertexArray(VAO);

    glGenBuffers(1, &VBO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);

    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);



    GLuint shaderProgramId = LoadShaders("../shader/SimpleVertexShader.vertexshader", "../shader/SimpleFragmentShader.fragmentshader");





    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    // 1. then set the vertex attributes pointers



    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex) , (void*)offsetof(Vertex,position) );
    glEnableVertexAttribArray(0);


    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex,color) );
    glEnableVertexAttribArray(1);

    glBindVertexArray(0);


//    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
//    glCompileShader(vertexShader);

    mat4 Projection = perspective(radians(45.0f), 4.0f / 3.0f, 0.1f, 100.0f);
   mat4 View = lookAt(vec3(0.005,5,.005),vec3(0,0,0),vec3(0,1,0) );
//    mat4 Model = mat4(1.0f);
//    Model = translate(Model,vec3(-1.0f, 0.0f, 0.0f));
//    Model = scale(Model,vec3(2.5f, 1.5f ,1.0f));
//    Model = rotate(Model,radians(45.0f),vec3(0.0f,0.0f,1.0f));
//
//    mat4 MVP = Projection * View * Model;

//    GLuint matrixID = glGetUniformLocation(shaderProgramId, "MVP");


    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    glfwSetKeyCallback(window, keyCallback);


    while(!glfwWindowShouldClose(window)) {


        glfwGetCursorPos (window, &mousePosX, &mousePosY );

        mat4 MVP = Projection * View * Model;

        glfwSetCursorPosCallback(window, cursor_position);


//        glfwSetCursorPosCallback(window, cursorPosition);

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) ;
        // 2. use our shader program when we want to render an object
        glUseProgram(shaderProgramId);

        glfwSetScrollCallback(window, scroll);

        GLuint matrixID = glGetUniformLocation(shaderProgramId, "MVP");


        glUniformMatrix4fv(matrixID, 1, GL_FALSE, &MVP[0][0]);

        // 3. now draw the object
        glBindVertexArray(VAO);

        glDrawArrays(GL_TRIANGLES, 0, 100);



        glfwSwapBuffers(window);

        glfwPollEvents();
    }

    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);

    glfwTerminate();
    return 0;
}

static void keyCallback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
    if (action == GLFW_PRESS)
        switch (key)
        {
            case GLFW_KEY_R :
                glClearColor(1.0f, 0.0f, 0.0f, 0.5f);
                break;
            case GLFW_KEY_V :
                glClearColor(0.0f, 1.0f, 0.0f, 0.5f);
                break;
            case GLFW_KEY_B :
                glClearColor(0.0f, 0.0f, 1.0f, 0.5f);
                break;
            case GLFW_KEY_ESCAPE:
                glfwSetWindowShouldClose(window, GLFW_TRUE);
                break;
            default:
                glClearColor(0.0f, 0.0f, 0.0f, 0.5f);
        }
    if (action == GLFW_RELEASE)
        glClearColor(0.3f, 0.4f, 0.3f, 0.5f);
}